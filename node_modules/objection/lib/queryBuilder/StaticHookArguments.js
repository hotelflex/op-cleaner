'use strict';

const { asArray } = require('../utils/objectUtils');

const BUILDER_SYMBOL = Symbol();

class StaticHookArguments {
  constructor({ builder, result = null, modelOptions = null }) {
    Object.defineProperty(this, BUILDER_SYMBOL, {
      value: builder
    });

    Object.defineProperty(this, 'result', {
      value: result
    });

    Object.defineProperty(this, 'modelOptions', {
      value: modelOptions
    });
  }

  static create(args) {
    return new StaticHookArguments(args);
  }

  get fetch() {
    return () => this[BUILDER_SYMBOL].toFindQuery().execute();
  }

  get context() {
    return this[BUILDER_SYMBOL].context();
  }

  get transaction() {
    return this[BUILDER_SYMBOL].unsafeKnex();
  }

  get modelInstances() {
    const op = this[BUILDER_SYMBOL].findOperation(getModelInstance);

    if (op) {
      return asArray(getModelInstance(op));
    } else {
      return [];
    }
  }

  get inputModelInstances() {
    const op = this[BUILDER_SYMBOL].findOperation(getInputModelInstance);

    if (op) {
      return asArray(getInputModelInstance(op));
    } else {
      return [];
    }
  }

  get cancelQuery() {
    return cancelValue => {
      if (cancelValue === undefined) {
        if (this[BUILDER_SYMBOL].isFind()) {
          cancelValue = [];
        } else {
          cancelValue = [0];
        }
      }

      this[BUILDER_SYMBOL].resolve(cancelValue);
    };
  }
}

function getModelInstance(op) {
  return op.instance || op.owner || op.owners;
}

function getInputModelInstance(op) {
  return op.models || op.model;
}

module.exports = {
  StaticHookArguments
};
